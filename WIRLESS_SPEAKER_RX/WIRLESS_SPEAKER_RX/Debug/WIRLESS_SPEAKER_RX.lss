
WIRLESS_SPEAKER_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000042a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000047e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015b0  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009fd  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009d7  00000000  00000000  00002591  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000029c  00000000  00000000  00002f68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000763  00000000  00000000  00003204  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ba1  00000000  00000000  00003967  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00004508  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 13 02 	jmp	0x426	; 0x426 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define CLEAR_OC0_ON_COMPARE_MATCH 0B10
#define PRESCALER                  0B011



int main(void){
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	60 97       	sbiw	r28, 0x10	; 16
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t word[5] ;
	uint16_t analog_val ; 
	
	
	word[0] = 0 ;
  96:	19 82       	std	Y+1, r1	; 0x01
	word[1] = 0 ;
  98:	1a 82       	std	Y+2, r1	; 0x02
	word[2] = 0 ;
  9a:	1b 82       	std	Y+3, r1	; 0x03
	word[3] = 0 ;
  9c:	1c 82       	std	Y+4, r1	; 0x04
	word[4] = 0 ;
  9e:	1d 82       	std	Y+5, r1	; 0x05
	
	
	uart_init();
  a0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <uart_init>
	spi_master_init( SCK_4MHZ );
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 af 00 	call	0x15e	; 0x15e <spi_master_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	83 ec       	ldi	r24, 0xC3	; 195
  ae:	99 e0       	ldi	r25, 0x09	; 9
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x2e>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x38>
  ba:	00 00       	nop
	
	
	_delay_ms(200);
	CE_INIT ;
  bc:	8e 9a       	sbi	0x11, 6	; 17
  be:	96 98       	cbi	0x12, 6	; 18
	CS_INIT ;
  c0:	8d 9a       	sbi	0x11, 5	; 17
  c2:	95 9a       	sbi	0x12, 5	; 18
	IRQ_INIT ;
  c4:	8a 98       	cbi	0x11, 2	; 17
  c6:	92 98       	cbi	0x12, 2	; 18
	DDRB |= ( 1 << PB3 );
  c8:	bb 9a       	sbi	0x17, 3	; 23
	DDRA = 0XFF ; 
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	8a bb       	out	0x1a, r24	; 26
	
	nrf_config my_config ;
	
	//START FAST PWM 
	
	OCR0 = 0 ; 
  ce:	1c be       	out	0x3c, r1	; 60
	TCCR0 = ( PRESCALER << CS00 ) | ( 1 << WGM00 )| ( 1 << WGM01 )| ( CLEAR_OC0_ON_COMPARE_MATCH << COM00 ) ;
  d0:	8b e6       	ldi	r24, 0x6B	; 107
  d2:	83 bf       	out	0x33, r24	; 51
	
	// Configuration
	
my_config.arc = 0 ;                               
  d4:	1f 86       	std	Y+15, r1	; 0x0f
my_config.ard = 0 ;                               
  d6:	1e 86       	std	Y+14, r1	; 0x0e
my_config.cont_wave_transmit = NO_WAVE ;
  d8:	1e 82       	std	Y+6, r1	; 0x06
my_config.crc = CRC_1BYTE ;        
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	8a 87       	std	Y+10, r24	; 0x0a
my_config.data_rate = RATE_1MBPS ;         
  de:	1f 82       	std	Y+7, r1	; 0x07
my_config.int_mask = RX_INT ;              
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	89 87       	std	Y+9, r24	; 0x09
my_config.module_state = POWER_UP ;           
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	8c 87       	std	Y+12, r24	; 0x0c
my_config.txrx_mode = RX ;                        
  e8:	8b 87       	std	Y+11, r24	; 0x0b
my_config.feature = NO_DYNPL_NO_AACK_NOCMD ;   
  ea:	1d 86       	std	Y+13, r1	; 0x0d
my_config.rf_ch = 10 ;     
  ec:	8a e0       	ldi	r24, 0x0A	; 10
  ee:	88 8b       	std	Y+16, r24	; 0x10
my_config.transmit_power = 0 ;
  f0:	18 86       	std	Y+8, r1	; 0x08
           
nrf_configure ( my_config );   
  f2:	e1 2c       	mov	r14, r1
  f4:	f1 2c       	mov	r15, r1
  f6:	00 e0       	ldi	r16, 0x00	; 0
  f8:	13 e0       	ldi	r17, 0x03	; 3
  fa:	22 e0       	ldi	r18, 0x02	; 2
  fc:	31 e0       	ldi	r19, 0x01	; 1
  fe:	41 e0       	ldi	r20, 0x01	; 1
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <nrf_configure>

pipe_setup( PIPE0 , 0X8723435212 , 5 , 0 , 1 , 3 )   ;    // RECEIVING PIPE EN_RX 1 , SHOCKBURST AACK PIPE ENACK 1 
 10a:	0f 2e       	mov	r0, r31
 10c:	f3 e0       	ldi	r31, 0x03	; 3
 10e:	8f 2e       	mov	r8, r31
 110:	f0 2d       	mov	r31, r0
 112:	aa 24       	eor	r10, r10
 114:	a3 94       	inc	r10
 116:	c1 2c       	mov	r12, r1
 118:	0f 2e       	mov	r0, r31
 11a:	f5 e0       	ldi	r31, 0x05	; 5
 11c:	ef 2e       	mov	r14, r31
 11e:	f0 2d       	mov	r31, r0
 120:	02 e1       	ldi	r16, 0x12	; 18
 122:	12 e5       	ldi	r17, 0x52	; 82
 124:	23 e4       	ldi	r18, 0x43	; 67
 126:	33 e2       	ldi	r19, 0x23	; 35
 128:	47 e8       	ldi	r20, 0x87	; 135
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	8a e0       	ldi	r24, 0x0A	; 10
 132:	0e 94 af 01 	call	0x35e	; 0x35e <pipe_setup>


	CE_HIGH; 
 136:	96 9a       	sbi	0x12, 6	; 18
	while (1)
	{

		
		IRQ_POLL ;								// wait for interrupt request
 138:	82 99       	sbic	0x10, 2	; 16
 13a:	fe cf       	rjmp	.-4      	; 0x138 <main+0xb6>
		nrf_rx_read( word , 3 ) ;               // READ THE PACKET
 13c:	63 e0       	ldi	r22, 0x03	; 3
 13e:	ce 01       	movw	r24, r28
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	0e 94 80 01 	call	0x300	; 0x300 <nrf_rx_read>
		analog_val = 0 ;
		analog_val = word[1];
 146:	8a 81       	ldd	r24, Y+2	; 0x02
 148:	90 e0       	ldi	r25, 0x00	; 0
		analog_val <<= 8 ; 
 14a:	98 2f       	mov	r25, r24
 14c:	88 27       	eor	r24, r24
		analog_val |= word[0];
		OCR0 = analog_val / 4 ;
 14e:	29 81       	ldd	r18, Y+1	; 0x01
 150:	82 2b       	or	r24, r18
 152:	96 95       	lsr	r25
 154:	87 95       	ror	r24
 156:	96 95       	lsr	r25
 158:	87 95       	ror	r24
 15a:	8c bf       	out	0x3c, r24	; 60
		
		 
		

	}
 15c:	ed cf       	rjmp	.-38     	; 0x138 <main+0xb6>

0000015e <spi_master_init>:

void spi_slave_init ( unsigned char clk_freq ){
	
	SPCR = ( 1 << SPE )|( clk_freq & 0b11 ) ; // SET SPR0 SPR1 ACCORDING TO CLK_FREQ AND SET SPE
	
	SPSR = ( clk_freq >> 2 ) ;  // SET OR CLEAR SPI2X
 15e:	97 b3       	in	r25, 0x17	; 23
 160:	90 6b       	ori	r25, 0xB0	; 176
 162:	97 bb       	out	0x17, r25	; 23
 164:	be 98       	cbi	0x17, 6	; 23
 166:	98 2f       	mov	r25, r24
 168:	93 70       	andi	r25, 0x03	; 3
 16a:	90 65       	ori	r25, 0x50	; 80
 16c:	9d b9       	out	0x0d, r25	; 13
 16e:	86 95       	lsr	r24
 170:	86 95       	lsr	r24
 172:	8e b9       	out	0x0e, r24	; 14
 174:	08 95       	ret

00000176 <spi_master_write>:



unsigned char spi_master_write ( unsigned char spi_byte  ){
	
	SPDR = spi_byte ;
 176:	8f b9       	out	0x0f, r24	; 15
	
	while ( !(SPSR & ( 1 << SPIF) ) ) ;
 178:	77 9b       	sbis	0x0e, 7	; 14
 17a:	fe cf       	rjmp	.-4      	; 0x178 <spi_master_write+0x2>
	
	return SPDR ;
 17c:	8f b1       	in	r24, 0x0f	; 15
}
 17e:	08 95       	ret

00000180 <spi_master_receive>:
// if another dummy is needed it can be changed by changing DUMMBY_BYTE MACRO
// Or using spi_master_write( ) with the right parameter

unsigned char spi_master_receive( void ){
	
	SPDR = DUMMY_BYTE ;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	8f b9       	out	0x0f, r24	; 15
	
	while( ! ( SPSR & ( 1 << SPIF )) );
 184:	77 9b       	sbis	0x0e, 7	; 14
 186:	fe cf       	rjmp	.-4      	; 0x184 <spi_master_receive+0x4>
	
	return SPDR ;
 188:	8f b1       	in	r24, 0x0f	; 15
}
 18a:	08 95       	ret

0000018c <w_register>:
	}

	CS_HIGH ;																	// LOW TO HIGHT END OF COMMAND	
	CE_PULSE ;																	// PULSE CE 10 uS
	
}
 18c:	cf 93       	push	r28
 18e:	c8 2f       	mov	r28, r24
 190:	95 98       	cbi	0x12, 5	; 18
 192:	86 2f       	mov	r24, r22
 194:	80 62       	ori	r24, 0x20	; 32
 196:	0e 94 bb 00 	call	0x176	; 0x176 <spi_master_write>
 19a:	8c 2f       	mov	r24, r28
 19c:	0e 94 bb 00 	call	0x176	; 0x176 <spi_master_write>
 1a0:	95 9a       	sbi	0x12, 5	; 18
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <nrf_configure>:
 1a6:	ef 92       	push	r14
 1a8:	ff 92       	push	r15
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	2b 97       	sbiw	r28, 0x0b	; 11
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	cd bf       	out	0x3d, r28	; 61
 1c2:	e9 82       	std	Y+1, r14	; 0x01
 1c4:	fa 82       	std	Y+2, r15	; 0x02
 1c6:	0b 83       	std	Y+3, r16	; 0x03
 1c8:	58 87       	std	Y+8, r21	; 0x08
 1ca:	69 87       	std	Y+9, r22	; 0x09
 1cc:	7a 87       	std	Y+10, r23	; 0x0a
 1ce:	8b 87       	std	Y+11, r24	; 0x0b
 1d0:	22 0f       	add	r18, r18
 1d2:	22 0f       	add	r18, r18
 1d4:	80 e1       	ldi	r24, 0x10	; 16
 1d6:	18 9f       	mul	r17, r24
 1d8:	b0 01       	movw	r22, r0
 1da:	11 24       	eor	r1, r1
 1dc:	62 2b       	or	r22, r18
 1de:	36 2b       	or	r19, r22
 1e0:	84 2f       	mov	r24, r20
 1e2:	88 0f       	add	r24, r24
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	83 2b       	or	r24, r19
 1e8:	0e 94 c6 00 	call	0x18c	; 0x18c <w_register>
 1ec:	89 85       	ldd	r24, Y+9	; 0x09
 1ee:	20 e1       	ldi	r18, 0x10	; 16
 1f0:	82 9f       	mul	r24, r18
 1f2:	c0 01       	movw	r24, r0
 1f4:	11 24       	eor	r1, r1
 1f6:	9a 85       	ldd	r25, Y+10	; 0x0a
 1f8:	64 e0       	ldi	r22, 0x04	; 4
 1fa:	89 2b       	or	r24, r25
 1fc:	0e 94 c6 00 	call	0x18c	; 0x18c <w_register>
 200:	2b 81       	ldd	r18, Y+3	; 0x03
 202:	82 2f       	mov	r24, r18
 204:	88 0f       	add	r24, r24
 206:	99 81       	ldd	r25, Y+1	; 0x01
 208:	40 e8       	ldi	r20, 0x80	; 128
 20a:	94 9f       	mul	r25, r20
 20c:	90 01       	movw	r18, r0
 20e:	11 24       	eor	r1, r1
 210:	28 2b       	or	r18, r24
 212:	8a 81       	ldd	r24, Y+2	; 0x02
 214:	88 0f       	add	r24, r24
 216:	88 0f       	add	r24, r24
 218:	88 0f       	add	r24, r24
 21a:	66 e0       	ldi	r22, 0x06	; 6
 21c:	82 2b       	or	r24, r18
 21e:	0e 94 c6 00 	call	0x18c	; 0x18c <w_register>
 222:	65 e0       	ldi	r22, 0x05	; 5
 224:	8b 85       	ldd	r24, Y+11	; 0x0b
 226:	0e 94 c6 00 	call	0x18c	; 0x18c <w_register>
 22a:	6d e1       	ldi	r22, 0x1D	; 29
 22c:	88 85       	ldd	r24, Y+8	; 0x08
 22e:	0e 94 c6 00 	call	0x18c	; 0x18c <w_register>
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 c6 00 	call	0x18c	; 0x18c <w_register>
 23a:	62 e0       	ldi	r22, 0x02	; 2
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 c6 00 	call	0x18c	; 0x18c <w_register>
 242:	2b 96       	adiw	r28, 0x0b	; 11
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	f8 94       	cli
 248:	de bf       	out	0x3e, r29	; 62
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	cd bf       	out	0x3d, r28	; 61
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	08 95       	ret

0000025c <set_addr>:
 25c:	9f 92       	push	r9
 25e:	af 92       	push	r10
 260:	bf 92       	push	r11
 262:	cf 92       	push	r12
 264:	df 92       	push	r13
 266:	ef 92       	push	r14
 268:	ff 92       	push	r15
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	b8 2e       	mov	r11, r24
 274:	c2 2f       	mov	r28, r18
 276:	d3 2f       	mov	r29, r19
 278:	f4 2e       	mov	r15, r20
 27a:	d5 2e       	mov	r13, r21
 27c:	c6 2e       	mov	r12, r22
 27e:	97 2e       	mov	r9, r23
 280:	85 e0       	ldi	r24, 0x05	; 5
 282:	8e 15       	cp	r24, r14
 284:	80 f1       	brcs	.+96     	; 0x2e6 <set_addr+0x8a>
 286:	63 e0       	ldi	r22, 0x03	; 3
 288:	8e ef       	ldi	r24, 0xFE	; 254
 28a:	8e 0d       	add	r24, r14
 28c:	0e 94 c6 00 	call	0x18c	; 0x18c <w_register>
 290:	95 98       	cbi	0x12, 5	; 18
 292:	8b 2d       	mov	r24, r11
 294:	80 62       	ori	r24, 0x20	; 32
 296:	0e 94 bb 00 	call	0x176	; 0x176 <spi_master_write>
 29a:	ae 2c       	mov	r10, r14
 29c:	b1 2c       	mov	r11, r1
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	a8 1a       	sub	r10, r24
 2a2:	b1 08       	sbc	r11, r1
 2a4:	ea f0       	brmi	.+58     	; 0x2e0 <set_addr+0x84>
 2a6:	e1 2c       	mov	r14, r1
 2a8:	80 2f       	mov	r24, r16
 2aa:	0e 94 bb 00 	call	0x176	; 0x176 <spi_master_write>
 2ae:	20 2f       	mov	r18, r16
 2b0:	31 2f       	mov	r19, r17
 2b2:	4c 2f       	mov	r20, r28
 2b4:	5d 2f       	mov	r21, r29
 2b6:	6f 2d       	mov	r22, r15
 2b8:	7d 2d       	mov	r23, r13
 2ba:	8c 2d       	mov	r24, r12
 2bc:	99 2d       	mov	r25, r9
 2be:	08 e0       	ldi	r16, 0x08	; 8
 2c0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__lshrdi3>
 2c4:	02 2f       	mov	r16, r18
 2c6:	13 2f       	mov	r17, r19
 2c8:	c4 2f       	mov	r28, r20
 2ca:	d5 2f       	mov	r29, r21
 2cc:	f6 2e       	mov	r15, r22
 2ce:	d7 2e       	mov	r13, r23
 2d0:	c8 2e       	mov	r12, r24
 2d2:	99 2e       	mov	r9, r25
 2d4:	e3 94       	inc	r14
 2d6:	8e 2d       	mov	r24, r14
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	a8 16       	cp	r10, r24
 2dc:	b9 06       	cpc	r11, r25
 2de:	24 f7       	brge	.-56     	; 0x2a8 <set_addr+0x4c>
 2e0:	95 9a       	sbi	0x12, 5	; 18
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <set_addr+0x8c>
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	ff 90       	pop	r15
 2f2:	ef 90       	pop	r14
 2f4:	df 90       	pop	r13
 2f6:	cf 90       	pop	r12
 2f8:	bf 90       	pop	r11
 2fa:	af 90       	pop	r10
 2fc:	9f 90       	pop	r9
 2fe:	08 95       	ret

00000300 <nrf_rx_read>:





void nrf_rx_read ( uint8_t * ptr , uint8_t num_bytes ){
 300:	cf 92       	push	r12
 302:	df 92       	push	r13
 304:	ef 92       	push	r14
 306:	ff 92       	push	r15
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	6c 01       	movw	r12, r24
 310:	e6 2e       	mov	r14, r22
	
	CE_LOW ;										// Leave RX_MODE
 312:	96 98       	cbi	0x12, 6	; 18
	CS_LOW ;										// HIGH TO LOW TRANSITION
 314:	95 98       	cbi	0x12, 5	; 18

	spi_master_write( R_RX_PAYLOAD ) ;				// Send write command to register
 316:	81 e6       	ldi	r24, 0x61	; 97
 318:	0e 94 bb 00 	call	0x176	; 0x176 <spi_master_write>
	
	for( uint8_t i  = 0 ; i <= num_bytes -1 ; i++ ){
 31c:	f1 2c       	mov	r15, r1
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	e8 1a       	sub	r14, r24
 322:	f1 08       	sbc	r15, r1
 324:	72 f0       	brmi	.+28     	; 0x342 <nrf_rx_read+0x42>
 326:	c0 e0       	ldi	r28, 0x00	; 0
		
	*( ptr + i ) = spi_master_receive();
 328:	86 01       	movw	r16, r12
 32a:	0c 0f       	add	r16, r28
 32c:	11 1d       	adc	r17, r1
 32e:	0e 94 c0 00 	call	0x180	; 0x180 <spi_master_receive>
 332:	f8 01       	movw	r30, r16
 334:	80 83       	st	Z, r24
	CE_LOW ;										// Leave RX_MODE
	CS_LOW ;										// HIGH TO LOW TRANSITION

	spi_master_write( R_RX_PAYLOAD ) ;				// Send write command to register
	
	for( uint8_t i  = 0 ; i <= num_bytes -1 ; i++ ){
 336:	cf 5f       	subi	r28, 0xFF	; 255
 338:	8c 2f       	mov	r24, r28
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	e8 16       	cp	r14, r24
 33e:	f9 06       	cpc	r15, r25
 340:	9c f7       	brge	.-26     	; 0x328 <nrf_rx_read+0x28>
		
	*( ptr + i ) = spi_master_receive();
	
	}
	
	CS_HIGH ;	
 342:	95 9a       	sbi	0x12, 5	; 18
	
	w_register( ( 1 << RX_DR ), REGISTER_STATUS ) ;   // CLEAR RX INTERRUPT 
 344:	67 e0       	ldi	r22, 0x07	; 7
 346:	80 e4       	ldi	r24, 0x40	; 64
 348:	0e 94 c6 00 	call	0x18c	; 0x18c <w_register>

	CE_HIGH ;										  // CE HIGH
 34c:	96 9a       	sbi	0x12, 6	; 18

}
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	ff 90       	pop	r15
 356:	ef 90       	pop	r14
 358:	df 90       	pop	r13
 35a:	cf 90       	pop	r12
 35c:	08 95       	ret

0000035e <pipe_setup>:


uint8_t pipe_setup (Pipe reg_addr , uint64_t addr , uint8_t addr_len , uint8_t ENACK , uint8_t ENRX , uint8_t plw ){
 35e:	8f 92       	push	r8
 360:	af 92       	push	r10
 362:	cf 92       	push	r12
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
 374:	f8 2e       	mov	r15, r24
	
	if( set_addr( reg_addr , addr , addr_len ) == 0  ) { return 0 ; }         // SET PIPE ADDRESS
 376:	0e 94 2e 01 	call	0x25c	; 0x25c <set_addr>
 37a:	88 23       	and	r24, r24
 37c:	29 f1       	breq	.+74     	; 0x3c8 <pipe_setup+0x6a>
	if ( plw > 32 ){ return 0 ; }											  // MAX PAYLOAD IS 32 BYTES
 37e:	80 e2       	ldi	r24, 0x20	; 32
 380:	88 15       	cp	r24, r8
 382:	f8 f0       	brcs	.+62     	; 0x3c2 <pipe_setup+0x64>
	w_register( plw , reg_addr + 7 ) ;										  // SET PIPE PAYLOAD WIDTH
 384:	67 e0       	ldi	r22, 0x07	; 7
 386:	6f 0d       	add	r22, r15
 388:	88 2d       	mov	r24, r8
 38a:	0e 94 c6 00 	call	0x18c	; 0x18c <w_register>
	if( ENACK ) w_register(  1 << ( reg_addr - 0x0A) , REGISTER_EN_AA );      // SET PIPE AACK SETTING
 38e:	cc 20       	and	r12, r12
 390:	51 f0       	breq	.+20     	; 0x3a6 <pipe_setup+0x48>
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	96 ef       	ldi	r25, 0xF6	; 246
 398:	9f 0d       	add	r25, r15
 39a:	01 c0       	rjmp	.+2      	; 0x39e <pipe_setup+0x40>
 39c:	88 0f       	add	r24, r24
 39e:	9a 95       	dec	r25
 3a0:	ea f7       	brpl	.-6      	; 0x39c <pipe_setup+0x3e>
 3a2:	0e 94 c6 00 	call	0x18c	; 0x18c <w_register>
	if( ENRX  ) w_register(  1 << ( reg_addr - 0x0A) , REGISTER_EN_RXADDR );  // SET PIPE RX ENABLE 
 3a6:	aa 20       	and	r10, r10
 3a8:	71 f0       	breq	.+28     	; 0x3c6 <pipe_setup+0x68>
 3aa:	96 ef       	ldi	r25, 0xF6	; 246
 3ac:	9f 0d       	add	r25, r15
 3ae:	62 e0       	ldi	r22, 0x02	; 2
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <pipe_setup+0x58>
 3b4:	88 0f       	add	r24, r24
 3b6:	9a 95       	dec	r25
 3b8:	ea f7       	brpl	.-6      	; 0x3b4 <pipe_setup+0x56>
 3ba:	0e 94 c6 00 	call	0x18c	; 0x18c <w_register>
	
	return 1 ; 	
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <pipe_setup+0x6a>


uint8_t pipe_setup (Pipe reg_addr , uint64_t addr , uint8_t addr_len , uint8_t ENACK , uint8_t ENRX , uint8_t plw ){
	
	if( set_addr( reg_addr , addr , addr_len ) == 0  ) { return 0 ; }         // SET PIPE ADDRESS
	if ( plw > 32 ){ return 0 ; }											  // MAX PAYLOAD IS 32 BYTES
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <pipe_setup+0x6a>
	w_register( plw , reg_addr + 7 ) ;										  // SET PIPE PAYLOAD WIDTH
	if( ENACK ) w_register(  1 << ( reg_addr - 0x0A) , REGISTER_EN_AA );      // SET PIPE AACK SETTING
	if( ENRX  ) w_register(  1 << ( reg_addr - 0x0A) , REGISTER_EN_RXADDR );  // SET PIPE RX ENABLE 
	
	return 1 ; 	
 3c6:	81 e0       	ldi	r24, 0x01	; 1
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	ff 90       	pop	r15
 3d2:	ef 90       	pop	r14
 3d4:	cf 90       	pop	r12
 3d6:	af 90       	pop	r10
 3d8:	8f 90       	pop	r8
 3da:	08 95       	ret

000003dc <uart_init>:



void uart_init( void ){
	
	UCSRB = ( 1 << RXEN ) | ( 1 << TXEN ) ; 
 3dc:	88 e1       	ldi	r24, 0x18	; 24
 3de:	8a b9       	out	0x0a, r24	; 10
	UCSRC = ( 1 << URSEL ) | ( 0B11 << UCSZ0 ) ;
 3e0:	86 e8       	ldi	r24, 0x86	; 134
 3e2:	80 bd       	out	0x20, r24	; 32
	UBRRL = 25 ; // 38400 BAUD 
 3e4:	89 e1       	ldi	r24, 0x19	; 25
 3e6:	89 b9       	out	0x09, r24	; 9
 3e8:	08 95       	ret

000003ea <__ashrdi3>:
 3ea:	97 fb       	bst	r25, 7
 3ec:	10 f8       	bld	r1, 0

000003ee <__lshrdi3>:
 3ee:	16 94       	lsr	r1
 3f0:	00 08       	sbc	r0, r0
 3f2:	0f 93       	push	r16
 3f4:	08 30       	cpi	r16, 0x08	; 8
 3f6:	98 f0       	brcs	.+38     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3f8:	08 50       	subi	r16, 0x08	; 8
 3fa:	23 2f       	mov	r18, r19
 3fc:	34 2f       	mov	r19, r20
 3fe:	45 2f       	mov	r20, r21
 400:	56 2f       	mov	r21, r22
 402:	67 2f       	mov	r22, r23
 404:	78 2f       	mov	r23, r24
 406:	89 2f       	mov	r24, r25
 408:	90 2d       	mov	r25, r0
 40a:	f4 cf       	rjmp	.-24     	; 0x3f4 <__lshrdi3+0x6>
 40c:	05 94       	asr	r0
 40e:	97 95       	ror	r25
 410:	87 95       	ror	r24
 412:	77 95       	ror	r23
 414:	67 95       	ror	r22
 416:	57 95       	ror	r21
 418:	47 95       	ror	r20
 41a:	37 95       	ror	r19
 41c:	27 95       	ror	r18
 41e:	0a 95       	dec	r16
 420:	aa f7       	brpl	.-22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 422:	0f 91       	pop	r16
 424:	08 95       	ret

00000426 <_exit>:
 426:	f8 94       	cli

00000428 <__stop_program>:
 428:	ff cf       	rjmp	.-2      	; 0x428 <__stop_program>
